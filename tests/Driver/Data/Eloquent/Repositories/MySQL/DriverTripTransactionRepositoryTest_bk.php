<?php

class DriverTripTransactionRepositoryTest extends TestCase
{
    use \Laravel\Lumen\Testing\DatabaseMigrations;

    /**
     * @var \Illuminate\Support\Collection $hires
     */
    private $tripTransactions;

    /**
     * @var \Driver\Data\Repositories\Contracts\DriverTripTransactionRepository $driverTransactionRepository
     */
    private $driverTransactionRepository;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->tripTransactions = new \Illuminate\Support\Collection();

        $this->driverTransactionRepository = app(
            \Driver\Domain\Repositories\DriverTripTransactionRepository::class
        );
    }

    /*public function testGetDriverBalanceUnpaid()
    {
//        $this->runDatabaseMigrations();

        $this->artisan('migrate:refresh');
        $this->runDatabaseMigrations();

        $driver = factory(\Driver\Data\Models\MobileUser::class)->create();

        $card = $this->makeCardHire($driver->id, 100);
        $credit = $this->makeCreditHire($driver->id, 100);
        $point = $this->makePointHire($driver->id, 100);

        $total = $card->amount + $credit->amount + $point->amount;

        $cardHireBalance = $this->driverTransactionRepository->getDriverBalance(
            $driver->id,
            \Carbon\Carbon::now(),
            \Carbon\Carbon::now()
        );

        $this->assertEquals(round($total, 2), round($cardHireBalance, 2));
    }*/

    public function testGetDriverBalancePaid()
    {
        $driver = factory(\Driver\Data\Models\People::class)->create();

        $card = $this->makeCardHire($driver->id);
        $credit = $this->makeCreditHire($driver->id);
        $point = $this->makePointHire($driver->id);

        $this->payCreditHire($driver->id, $card->trip_id, $card->amount);
        $this->payCardHire($driver->id, $credit->trip_id, $credit->amount);
        $this->payPointHire($driver->id, $point->trip_id, $point->amount);

        $total = 0;

        //dd(app(\Driver\Data\Models\DriverTripTransaction::class)::get(['transaction_type', 'transaction_category', 'amount'])->toArray());

        $cardHireBalance = $this->driverTransactionRepository->getDriverBalance(
            $driver->id,
            \Carbon\Carbon::now(),
            \Carbon\Carbon::now()
        );

        dd($cardHireBalance);

        $this->assertEquals($total, $cardHireBalance);
    }


    public function testGetHireAmountBalance()
    {

    }

    private function makeCreditHire($driverId)
    {
        $trip = factory(\Driver\Data\Models\PassengersLogArchive::class)->create();

        return factory(\Driver\Data\Models\DriverTripTransaction::class)->create(
            [
                'transaction_type'     => \Driver\Data\Models\DriverTripTransaction::CREDIT,
                'transaction_category' => \Driver\Data\Models\DriverTripTransaction::CREDIT_HIRE,
                'trip_id'              => $trip->passsengers_log_id,
                'driver_id'            => $driverId,
        ]);
    }

    private function makeCashHire($driverId)
    {
        $trip = factory(\Driver\Data\Models\PassengersLogArchive::class)->create([
            'driver_id' => $driverId,
        ]);

        return factory(\Driver\Data\Models\Transaction::class)->create(
            [
                'passengers_log_id' => $trip->passeners_log_id,
            ]
        );
    }

    private function makePointHire($driverId)
    {
        $trip = factory(\Driver\Data\Models\PassengersLogArchive::class)->create();

        return factory(\Driver\Data\Models\DriverTripTransaction::class)->create(
            [
                'transaction_type'     => \Driver\Data\Models\DriverTripTransaction::CREDIT,
                'transaction_category' => \Driver\Data\Models\DriverTripTransaction::POINT_HIRE,
                'trip_id'              => $trip->passenger_log_id,
                'driver_id'            => $driverId,
            ]
        );
    }

    private function makeCardHire($driverId)
    {
        $trip = factory(\Driver\Data\Models\PassengersLogArchive::class)->create();

        return factory(\Driver\Data\Models\DriverTripTransaction::class)->create(
            [
                'transaction_type'     => \Driver\Data\Models\DriverTripTransaction::CREDIT,
                'transaction_category' => \Driver\Data\Models\DriverTripTransaction::CARD_HIRE,
                'trip_id'              => $trip->passengers_log_id,
                'driver_id'            => $driverId,
        ]);
    }

    private function payCreditHire($driverId, $tripId, $amount)
    {
        return factory(\Driver\Data\Models\DriverTripTransaction::class)->create(
            [
                'transaction_type'     => \Driver\Data\Models\DriverTripTransaction::DEBIT,
                'transaction_category' => \Driver\Data\Models\DriverTripTransaction::CREDIT_HIRE_PAID,
                'trip_id'              => $tripId,
                'driver_id'            => $driverId,
                'amount'               => $amount,
            ]
        );
    }

    private function payCardHire($driverId, $tripId, $amount)
    {
        return factory(\Driver\Data\Models\DriverTripTransaction::class)->create(
            [
                'transaction_type'     => \Driver\Data\Models\DriverTripTransaction::DEBIT,
                'transaction_category' => \Driver\Data\Models\DriverTripTransaction::CARD_HIRE_PAID,
                'trip_id'              => $tripId,
                'driver_id'            => $driverId,
                'amount'               => $amount,
            ]
        );
    }

    private function payPointHire($driverId, $tripId, $amount)
    {
        return factory(\Driver\Data\Models\DriverTripTransaction::class)->create(
            [
                'transaction_type'     => \Driver\Data\Models\DriverTripTransaction::DEBIT,
                'transaction_category' => \Driver\Data\Models\DriverTripTransaction::POINT_HIRE_PAID,
                'trip_id'              => $tripId,
                'driver_id'            => $driverId,
                'amount'               => $amount,
            ]
        );
    }

    private function voidTransaction($driverId, $tripId, $amount, $type)
    {
        return factory(\Driver\Data\Models\DriverTripTransaction::class)->create(
            [
                'transaction_type'     => \Driver\Data\Models\DriverTripTransaction::DEBIT,
                'transaction_category' => $type,
                'trip_id'              => $tripId,
                'driver_id'            => $driverId,
                'amount'               => $amount,
            ]
        );
    }
}